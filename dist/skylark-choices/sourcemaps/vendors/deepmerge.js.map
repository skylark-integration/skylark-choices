{"version":3,"sources":["vendors/deepmerge.js"],"names":["define","defaultIsMergeableObject","cloneUnlessOtherwiseSpecified","value","options","clone","isMergeableObject","deepmerge","val","Array","isArray","defaultArrayMerge","target","source","concat","map","element","getKeys","Object","keys","getOwnPropertySymbols","filter","symbol","propertyIsEnumerable","getEnumerableOwnPropertySymbols","propertyIsOnObject","object","property","_","mergeObject","destination","forEach","key","hasOwnProperty","call","propertyIsUnsafe","customMerge","getMergeFunction","arrayMerge","sourceIsArray","all","array","Error","reduce","prev","next"],"mappings":";;;;;;;AAAAA,QACC,yBACC,SAASC,GAMV,SAASC,EAA8BC,EAAOC,GAC7C,OAA0B,IAAlBA,EAAQC,OAAmBD,EAAQE,kBAAkBH,GAC1DI,GANiBC,EAMKL,EALlBM,MAAMC,QAAQF,UAKYL,EAAOC,GACrCD,EAPJ,IAAqBK,EAUrB,SAASG,EAAkBC,EAAQC,EAAQT,GAC1C,OAAOQ,EAAOE,OAAOD,GAAQE,IAAI,SAASC,GACzC,OAAOd,EAA8Bc,EAASZ,KAoBhD,SAASa,EAAQL,GAChB,OAAOM,OAAOC,KAAKP,GAAQE,OAT5B,SAAyCF,GACxC,OAAOM,OAAOE,sBACXF,OAAOE,sBAAsBR,GAAQS,OAAO,SAASC,GACtD,OAAOV,EAAOW,qBAAqBD,QAMHE,CAAgCZ,IAGnE,SAASa,EAAmBC,EAAQC,GACnC,IACC,OAAOA,KAAYD,EAClB,MAAME,GACP,OAAO,GAWT,SAASC,EAAYjB,EAAQC,EAAQT,GACpC,IAAI0B,KAiBJ,OAhBI1B,EAAQE,kBAAkBM,IAC7BK,EAAQL,GAAQmB,QAAQ,SAASC,GAChCF,EAAYE,GAAO9B,EAA8BU,EAAOoB,GAAM5B,KAGhEa,EAAQJ,GAAQkB,QAAQ,SAASC,IAblC,SAA0BpB,EAAQoB,GACjC,OAAOP,EAAmBb,EAAQoB,MAC5Bd,OAAOe,eAAeC,KAAKtB,EAAQoB,IACpCd,OAAOK,qBAAqBW,KAAKtB,EAAQoB,KAWzCG,CAAiBvB,EAAQoB,KAIzBP,EAAmBb,EAAQoB,IAAQ5B,EAAQE,kBAAkBO,EAAOmB,IACvEF,EAAYE,GAhDf,SAA0BA,EAAK5B,GAC9B,IAAKA,EAAQgC,YACZ,OAAO7B,EAER,IAAI6B,EAAchC,EAAQgC,YAAYJ,GACtC,MAA8B,mBAAhBI,EAA6BA,EAAc7B,EA2CpC8B,CAAiBL,EAAK5B,EAAtBiC,CAA+BzB,EAAOoB,GAAMnB,EAAOmB,GAAM5B,GAE5E0B,EAAYE,GAAO9B,EAA8BW,EAAOmB,GAAM5B,MAGzD0B,EAGR,SAASvB,EAAUK,EAAQC,EAAQT,IAClCA,EAAUA,OACFkC,WAAalC,EAAQkC,YAAc3B,EAC3CP,EAAQE,kBAAoBF,EAAQE,mBAAqBL,EAGzDG,EAAQF,8BAAgCA,EAExC,IAAIqC,EAAgB9B,MAAMC,QAAQG,GAIlC,OAFgC0B,IADZ9B,MAAMC,QAAQE,GAKvB2B,EACHnC,EAAQkC,WAAW1B,EAAQC,EAAQT,GAEnCyB,EAAYjB,EAAQC,EAAQT,GAJ5BF,EAA8BW,EAAQT,GAkB/C,OAVAG,EAAUiC,IAAM,SAAsBC,EAAOrC,GAC5C,IAAKK,MAAMC,QAAQ+B,GAClB,MAAM,IAAIC,MAAM,qCAGjB,OAAOD,EAAME,OAAO,SAASC,EAAMC,GAClC,OAAOtC,EAAUqC,EAAMC,EAAMzC,SAIxBG","file":"../../vendors/deepmerge.js","sourcesContent":["define([\r\n\t\"./is-mergeable-object\"\r\n],function(defaultIsMergeableObject){\r\n\r\n\tfunction emptyTarget(val) {\r\n\t\treturn Array.isArray(val) ? [] : {}\r\n\t}\r\n\r\n\tfunction cloneUnlessOtherwiseSpecified(value, options) {\r\n\t\treturn (options.clone !== false && options.isMergeableObject(value))\r\n\t\t\t? deepmerge(emptyTarget(value), value, options)\r\n\t\t\t: value\r\n\t}\r\n\r\n\tfunction defaultArrayMerge(target, source, options) {\r\n\t\treturn target.concat(source).map(function(element) {\r\n\t\t\treturn cloneUnlessOtherwiseSpecified(element, options)\r\n\t\t})\r\n\t}\r\n\r\n\tfunction getMergeFunction(key, options) {\r\n\t\tif (!options.customMerge) {\r\n\t\t\treturn deepmerge\r\n\t\t}\r\n\t\tvar customMerge = options.customMerge(key)\r\n\t\treturn typeof customMerge === 'function' ? customMerge : deepmerge\r\n\t}\r\n\r\n\tfunction getEnumerableOwnPropertySymbols(target) {\r\n\t\treturn Object.getOwnPropertySymbols\r\n\t\t\t? Object.getOwnPropertySymbols(target).filter(function(symbol) {\r\n\t\t\t\treturn target.propertyIsEnumerable(symbol)\r\n\t\t\t})\r\n\t\t\t: []\r\n\t}\r\n\r\n\tfunction getKeys(target) {\r\n\t\treturn Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))\r\n\t}\r\n\r\n\tfunction propertyIsOnObject(object, property) {\r\n\t\ttry {\r\n\t\t\treturn property in object\r\n\t\t} catch(_) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\t// Protects from prototype poisoning and unexpected merging up the prototype chain.\r\n\tfunction propertyIsUnsafe(target, key) {\r\n\t\treturn propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\r\n\t\t\t&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\r\n\t\t\t\t&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.\r\n\t}\r\n\r\n\tfunction mergeObject(target, source, options) {\r\n\t\tvar destination = {}\r\n\t\tif (options.isMergeableObject(target)) {\r\n\t\t\tgetKeys(target).forEach(function(key) {\r\n\t\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options)\r\n\t\t\t})\r\n\t\t}\r\n\t\tgetKeys(source).forEach(function(key) {\r\n\t\t\tif (propertyIsUnsafe(target, key)) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\tif (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\r\n\t\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options)\r\n\t\t\t} else {\r\n\t\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options)\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn destination\r\n\t}\r\n\r\n\tfunction deepmerge(target, source, options) {\r\n\t\toptions = options || {}\r\n\t\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge\r\n\t\toptions.isMergeableObject = options.isMergeableObject || defaultIsMergeableObject\r\n\t\t// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\r\n\t\t// implementations can use it. The caller may not replace it.\r\n\t\toptions.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified\r\n\r\n\t\tvar sourceIsArray = Array.isArray(source)\r\n\t\tvar targetIsArray = Array.isArray(target)\r\n\t\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray\r\n\r\n\t\tif (!sourceAndTargetTypesMatch) {\r\n\t\t\treturn cloneUnlessOtherwiseSpecified(source, options)\r\n\t\t} else if (sourceIsArray) {\r\n\t\t\treturn options.arrayMerge(target, source, options)\r\n\t\t} else {\r\n\t\t\treturn mergeObject(target, source, options)\r\n\t\t}\r\n\t}\r\n\r\n\tdeepmerge.all = function deepmergeAll(array, options) {\r\n\t\tif (!Array.isArray(array)) {\r\n\t\t\tthrow new Error('first argument should be an array')\r\n\t\t}\r\n\r\n\t\treturn array.reduce(function(prev, next) {\r\n\t\t\treturn deepmerge(prev, next, options)\r\n\t\t}, {})\r\n\t}\r\n\r\n\treturn deepmerge\r\n});"]}