{"version":3,"sources":["components/list.js"],"names":["define","constants","[object Object]","element","this","scrollPos","scrollTop","height","offsetHeight","innerHTML","node","appendChild","selector","querySelector","hasChildNodes","direction","listHeight","listScrollPosition","elementHeight","elementPos","offsetTop","destination","requestAnimationFrame","_animateScroll","strength","easing","distance","SCROLLING_SPEED","choiceListScrollTop","continueAnimation","_scrollDown","_scrollUp"],"mappings":";;;;;;;AAAAA,QACI,gBACD,SAAUC,GACT,aACA,aACIC,aAAYC,QAACA,IACTC,KAAKD,QAAUA,EACfC,KAAKC,UAAYD,KAAKD,QAAQG,UAC9BF,KAAKG,OAASH,KAAKD,QAAQK,aAE/BN,QACIE,KAAKD,QAAQM,UAAY,GAE7BP,OAAOQ,GACHN,KAAKD,QAAQQ,YAAYD,GAE7BR,SAASU,GACL,OAAOR,KAAKD,QAAQU,cAAcD,GAEtCV,cACI,OAAOE,KAAKD,QAAQW,gBAExBZ,cACIE,KAAKD,QAAQG,UAAY,EAE7BJ,qBAAqBC,EAASY,GAC1B,IAAKZ,EACD,OAEJ,MAAMa,EAAaZ,KAAKD,QAAQK,aAC1BS,EAAqBb,KAAKD,QAAQG,UAAYU,EAC9CE,EAAgBf,EAAQK,aACxBW,EAAahB,EAAQiB,UAAYF,EACjCG,EAAcN,EAAY,EAAIX,KAAKD,QAAQG,UAAYa,EAAaF,EAAqBd,EAAQiB,UACvGE,sBAAsB,KAClBlB,KAAKmB,eAAeF,EAAaN,KAGzCb,YAAYG,EAAWmB,EAAUH,GAC7B,MAAMI,GAAUJ,EAAchB,GAAamB,EACrCE,EAAWD,EAAS,EAAIA,EAAS,EACvCrB,KAAKD,QAAQG,UAAYD,EAAYqB,EAEzCxB,UAAUG,EAAWmB,EAAUH,GAC3B,MAAMI,GAAUpB,EAAYgB,GAAeG,EACrCE,EAAWD,EAAS,EAAIA,EAAS,EACvCrB,KAAKD,QAAQG,UAAYD,EAAYqB,EAEzCxB,eAAemB,EAAaN,GACxB,MAAMS,EAAWvB,EAAU0B,gBACrBC,EAAsBxB,KAAKD,QAAQG,UACzC,IAAIuB,GAAoB,EACpBd,EAAY,GACZX,KAAK0B,YAAYF,EAAqBJ,EAAUH,GAC5CO,EAAsBP,IACtBQ,GAAoB,KAGxBzB,KAAK2B,UAAUH,EAAqBJ,EAAUH,GAC1CO,EAAsBP,IACtBQ,GAAoB,IAGxBA,GACAP,sBAAsB,KAClBlB,KAAKmB,eAAeF,EAAaN","file":"../../components/list.js","sourcesContent":["define([\n    '../constants'\n], function (constants) {\n    'use strict';\n    return class List {\n        constructor({element}) {\n            this.element = element;\n            this.scrollPos = this.element.scrollTop;\n            this.height = this.element.offsetHeight;\n        }\n        clear() {\n            this.element.innerHTML = '';\n        }\n        append(node) {\n            this.element.appendChild(node);\n        }\n        getChild(selector) {\n            return this.element.querySelector(selector);\n        }\n        hasChildren() {\n            return this.element.hasChildNodes();\n        }\n        scrollToTop() {\n            this.element.scrollTop = 0;\n        }\n        scrollToChildElement(element, direction) {\n            if (!element) {\n                return;\n            }\n            const listHeight = this.element.offsetHeight;\n            const listScrollPosition = this.element.scrollTop + listHeight;\n            const elementHeight = element.offsetHeight;\n            const elementPos = element.offsetTop + elementHeight;\n            const destination = direction > 0 ? this.element.scrollTop + elementPos - listScrollPosition : element.offsetTop;\n            requestAnimationFrame(() => {\n                this._animateScroll(destination, direction);\n            });\n        }\n        _scrollDown(scrollPos, strength, destination) {\n            const easing = (destination - scrollPos) / strength;\n            const distance = easing > 1 ? easing : 1;\n            this.element.scrollTop = scrollPos + distance;\n        }\n        _scrollUp(scrollPos, strength, destination) {\n            const easing = (scrollPos - destination) / strength;\n            const distance = easing > 1 ? easing : 1;\n            this.element.scrollTop = scrollPos - distance;\n        }\n        _animateScroll(destination, direction) {\n            const strength = constants.SCROLLING_SPEED;\n            const choiceListScrollTop = this.element.scrollTop;\n            let continueAnimation = false;\n            if (direction > 0) {\n                this._scrollDown(choiceListScrollTop, strength, destination);\n                if (choiceListScrollTop < destination) {\n                    continueAnimation = true;\n                }\n            } else {\n                this._scrollUp(choiceListScrollTop, strength, destination);\n                if (choiceListScrollTop > destination) {\n                    continueAnimation = true;\n                }\n            }\n            if (continueAnimation) {\n                requestAnimationFrame(() => {\n                    this._animateScroll(destination, direction);\n                });\n            }\n        }\n    };\n});"]}